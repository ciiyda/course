@page "/courseList"
@using CourseModels
@using CourseBusnies.Contracts


@inject ICourseRepository _courseRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsruntime


@attribute [Authorize]

<div class="row mt-4">
    <div class="col-3">
        <h5>Course List</h5>
        <br />
        <NavLink href="course/Createorupdate" class="btn btn-success ">Course Ad </NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Price</th>
                    <th scope="col">Description</th>
                    <th scope="col">Title</th>
                    <th scope="col">Is Active</th>
                </tr>
            </thead>
            <tbody>
                @if (CourseModelList.Any())
                {
                    foreach (var course in CourseModelList)
                    {
                        <tr>
                            <th>@course.Name</th>
                            <td>@course.CoursePrice</td>
                            <td>@course.Description</td>
                            <td>@course.Title</td>
                            @if (course.IsActive)

                            {
                                <td>
                                    Active
                                </td>
                            }
                            else
                            {
                                <td>
                                    Pasif
                                </td>
                            }
                        <td>
                            <NavLink href="@($"/course/edit/{course.Id}")" class="btn btn-success">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>DeletCourse(course.Id)">Delete</button>

                        </td>


                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">@ErrorMessage</td>
                    </tr>
                }


            </tbody>
        </table>
    </div>
</div>



@code {


    private IEnumerable<CourseDto> CourseModelList { get; set; } = new List<CourseDto>();
    public string ErrorMessage { get; set; }
    private int? DeleteCourseId { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        var data = await _courseRepository.GetAllCourse();
        if (!data.IsSucces)
        {
            ErrorMessage = data.Message;
        }

        else
        {
            CourseModelList = data.Data;
        }

    }

    private async Task DeletCourse(int courseId)
    {
        var delete= await _courseRepository.DeleteeCourse(courseId);
        if (delete.IsSucces)

            await _jsruntime.ToastrSuccess(delete.Message);
        else
            await _jsruntime.ToastrError(delete.Message);
    }


}